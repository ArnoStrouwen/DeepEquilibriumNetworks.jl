var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"manual/deqs/#Deep-Equilibrium-Models","page":"DEQ Layers","title":"Deep Equilibrium Models","text":"","category":"section"},{"location":"manual/deqs/#Standard-Models","page":"DEQ Layers","title":"Standard Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"DeepEquilibriumNetwork\nSkipDeepEquilibriumNetwork","category":"page"},{"location":"manual/deqs/#FastDEQ.DeepEquilibriumNetwork","page":"DEQ Layers","title":"FastDEQ.DeepEquilibriumNetwork","text":"DeepEquilibriumNetwork(model, solver; jacobian_regularization::Bool=false, sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10), kwargs...)\n\nDeep Equilibrium Network as proposed in Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019)\n\nArguments\n\nmodel: Neural Network\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver)\njacobian_regularization: If true, Jacobian Loss is computed and stored in the DeepEquilibriumSolution\nsensealg: See DeepEquilibriumAdjoint\nkwargs: Additional Parameters that are directly passed to solve\n\nExample\n\nmodel = DeepEquilibriumNetwork(\n    Parallel(\n        +,\n        Dense(2, 2; bias=false),\n        Dense(2, 2; bias=false)\n    ),\n    ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0)\n)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(Float32, 2, 1), ps, st)\n\nSee also: SkipDeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#FastDEQ.SkipDeepEquilibriumNetwork","page":"DEQ Layers","title":"FastDEQ.SkipDeepEquilibriumNetwork","text":"SkipDeepEquilibriumNetwork(model, shortcut, solver; jacobian_regularization::Bool=false, sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10), kwargs...)\n\nSkip Deep Equilibrium Network as proposed in Avik Pal, Alan Edelman, Christopher Rackauckas (2022)\n\nArguments\n\nmodel: Neural Network\nshortcut: Shortcut for the network (pass nothing for SkipDEQV2)\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver)\njacobian_regularization: If true, Jacobian Loss is computed and stored in the DeepEquilibriumSolution\nsensealg: See DeepEquilibriumAdjoint\nkwargs: Additional Parameters that are directly passed to solve\n\nExample\n\n# SkipDEQ\nmodel = SkipDeepEquilibriumNetwork(\n    Parallel(\n        +,\n        Dense(2, 2; bias=false),\n        Dense(2, 2; bias=false)\n    ),\n    Dense(2, 2),\n    ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0)\n)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(Float32, 2, 1), ps, st)\n\n# SkipDEQV2\nmodel = SkipDeepEquilibriumNetwork(\n    Parallel(\n        +,\n        Dense(2, 2; bias=false),\n        Dense(2, 2; bias=false)\n    ),\n    nothing,\n    ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0)\n)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\nmodel(rand(Float32, 2, 1), ps, st)\n\nSee also: DeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#MultiScale-Models","page":"DEQ Layers","title":"MultiScale Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"MultiScaleDeepEquilibriumNetwork\nMultiScaleSkipDeepEquilibriumNetwork","category":"page"},{"location":"manual/deqs/#FastDEQ.MultiScaleDeepEquilibriumNetwork","page":"DEQ Layers","title":"FastDEQ.MultiScaleDeepEquilibriumNetwork","text":"MultiScaleDeepEquilibriumNetwork(main_layers::Tuple, mapping_layers::Matrix, post_fuse_layer::Union{Nothing,Tuple}, solver, scales; sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10), kwargs...)\n\nMultiscale Deep Equilibrium Network as proposed in Shaojie Bai, Vladlen Koltun, J. Zico Kolter (2020)\n\nArguments\n\nmain_layers: Tuple of Neural Networks. The first network needs to take a tuple of 2 arrays, the other ones only take 1 input\nmapping_layers: Matrix of Neural Networks. The (i j)^th network takes the output of i^th main_layer and passes it to the j^th main_layer\npost_fuse_layer: Tuple of Neural Networks. Each of the scales are passed through this layer\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver)\nscales: Output scales\nsensealg: See DeepEquilibriumAdjoint\nkwargs: Additional Parameters that are directly passed to solve\n\nExample\n\nmodel = MultiScaleDeepEquilibriumNetwork(\n    (\n        Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)),\n        Dense(3, 3, tanh),\n        Dense(2, 2, tanh),\n        Dense(1, 1, tanh)\n    ),\n    [\n        NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh);\n        Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh);\n        Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh);\n        Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()\n    ],\n    nothing,\n    ContinuousDEQSolver(VCABM3(); abstol=0.01f0, reltol=0.01f0),\n    ((4,), (3,), (2,), (1,)),\n)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 1)\n\nmodel(x, ps, st)\n\nSee also: DeepEquilibriumNetwork, SkipDeepEquilibriumNetwork, MultiScaleSkipDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/deqs/#FastDEQ.MultiScaleSkipDeepEquilibriumNetwork","page":"DEQ Layers","title":"FastDEQ.MultiScaleSkipDeepEquilibriumNetwork","text":"MultiScaleSkipDeepEquilibriumNetwork(main_layers::Tuple, mapping_layers::Matrix, post_fuse_layer::Union{Nothing,Tuple}, shortcut_layers::Union{Nothing,Tuple}, solver, scales; sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10), kwargs...)\n\nMultiscale Deep Equilibrium Network as proposed in Shaojie Bai, Vladlen Koltun, J. Zico Kolter (2020) combined with Skip Deep Equilibrium Network as proposed in Avik Pal, Alan Edelman, Christopher Rackauckas (2022)\n\nArguments\n\nmain_layers: Tuple of Neural Networks. The first network needs to take a tuple of 2 arrays, the other ones only take 1 input\nmapping_layers: Matrix of Neural Networks. The (i j)^th network takes the output of i^th main_layer and passes it to the j^th main_layer\npost_fuse_layer: Tuple of Neural Networks. Each of the scales are passed through this layer\nshortcut_layers: Shortcut for the network (pass nothing for SkipDEQV2)\nsolver: Solver for the optimization problem (See: ContinuousDEQSolver & DiscreteDEQSolver)\nscales: Output scales\nsensealg: See DeepEquilibriumAdjoint\nkwargs: Additional Parameters that are directly passed to solve\n\nExample\n\n# MSkipDEQ\nmodel = MultiScaleSkipDeepEquilibriumNetwork(\n    (\n        Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)),\n        Dense(3, 3, tanh),\n        Dense(2, 2, tanh),\n        Dense(1, 1, tanh),\n    ),\n    [\n        NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh)\n        Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh)\n        Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh)\n        Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()\n    ],\n    nothing,\n    (Dense(4, 4, tanh), Dense(4, 3, tanh), Dense(4, 2, tanh), Dense(4, 1, tanh)),\n    ContinuousDEQSolver(; abstol=0.1f0, reltol=0.1f0, abstol_termination=0.1f0, reltol_termination=0.1f0),\n    ((4,), (3,), (2,), (1,));\n    sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10),\n)\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 2)\n\nmodel(x, ps, st)\n\n# MSkipDEQV2\nmodel = MultiScaleSkipDeepEquilibriumNetwork(\n        (\n            Parallel(+, Dense(4, 4, tanh), Dense(4, 4, tanh)),\n            Dense(3, 3, tanh),\n            Dense(2, 2, tanh),\n            Dense(1, 1, tanh),\n        ),\n        [\n            NoOpLayer() Dense(4, 3, tanh) Dense(4, 2, tanh) Dense(4, 1, tanh)\n            Dense(3, 4, tanh) NoOpLayer() Dense(3, 2, tanh) Dense(3, 1, tanh)\n            Dense(2, 4, tanh) Dense(2, 3, tanh) NoOpLayer() Dense(2, 1, tanh)\n            Dense(1, 4, tanh) Dense(1, 3, tanh) Dense(1, 2, tanh) NoOpLayer()\n        ],\n        nothing,\n        nothing,\n        ContinuousDEQSolver(; abstol=0.1f0, reltol=0.1f0, abstol_termination=0.1f0, reltol_termination=0.1f0),\n        ((4,), (3,), (2,), (1,));\n        sensealg=DeepEquilibriumAdjoint(0.1f0, 0.1f0, 10),\n    )\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\nx = rand(rng, Float32, 4, 2)\n\nmodel(x, ps, st)\n\nSee also: DeepEquilibriumNetwork, SkipDeepEquilibriumNetwork, MultiScaleDeepEquilibriumNetwork\n\n\n\n\n\n","category":"type"},{"location":"manual/misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"manual/misc/","page":"Miscellaneous","title":"Miscellaneous","text":"SteadyStateAdjoint\nDeepEquilibriumSolution\nget_and_clear_nfe!\ncompute_deq_jacobian_loss\nNormalInitializer\nSupervisedLossContainer","category":"page"},{"location":"manual/misc/#FastDEQ.DeepEquilibriumSolution","page":"Miscellaneous","title":"FastDEQ.DeepEquilibriumSolution","text":"DeepEquilibriumSolution(z_star, u₀, residual, jacobian_loss, nfe)\n\nStores the solution of a DeepEquilibriumNetwork and its variants.\n\nFields\n\n* `z_star`: Steady-State or the value reached due to maxiters\n* `u₀`: Initial Condition\n* `residual`: Difference of the ``z^*`` and ``f(z^*, x)``\n* `jacobian_loss`: Jacobian Stabilization Loss (see individual networks to see how it can be computed)\n* `nfe`: Number of Function Evaluations\n\n\n\n\n\n","category":"type"},{"location":"manual/misc/#FastDEQ.NormalInitializer","page":"Miscellaneous","title":"FastDEQ.NormalInitializer","text":"NormalInitializer(μ = 0.0f0, σ² = 0.01f0)\n\nInitializes the weights of the network with a normal distribution. For DEQs the training is stable if we use this as the Initialization\n\n\n\n\n\n","category":"function"},{"location":"manual/solvers/#Dynamical-System-Variants","page":"Dynamical Systems","title":"Dynamical System Variants","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019) introduced Discrete Deep Equilibrium Models which drives a Discrete Dynamical System to its steady-state. Avik Pal, Alan Edelman, Christopher Rackauckas (2022) extends this framework to Continuous Dynamical Systems which converge to the steady-stable in a more stable fashion. For a detailed discussion refer to Avik Pal, Alan Edelman, Christopher Rackauckas (2022).","category":"page"},{"location":"manual/solvers/#Continuous-DEQs","page":"Dynamical Systems","title":"Continuous DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"ContinuousDEQSolver","category":"page"},{"location":"manual/solvers/#FastDEQ.ContinuousDEQSolver","page":"Dynamical Systems","title":"FastDEQ.ContinuousDEQSolver","text":"ContinuousDEQSolver(alg=VCABM3(); mode::Symbol=:rel_deq_default, abstol=1f-8, reltol=1f-8, abstol_termination=1f-8, reltol_termination=1f-8, tspan=Inf32)\n\nSolver for Continuous DEQ Problem (Avik Pal, Alan Edelman, Christopher Rackauckas (2022)). Similar to DynamicSS but provides more flexibility needed for solving DEQ problems.\n\nArguments\n\nalg: Algorithm to solve the ODEProblem. (Default: VCABM3())\nmode: Termination Mode of the solver. See below for a description of the various termination conditions (Default: :rel_deq_default)\nabstol: Absolute tolerance for time stepping. (Default: 1f-8)\nreltol: Relative tolerance for time stepping. (Default: 1f-8)\nabstol_termination: Absolute tolerance for termination. (Default: 1f-8)\nreltol_termination: Relative tolerance for termination. (Default: 1f-8)\ntspan: Time span. Users should not change this value, instead control termination through maxiters in solve (Default: Inf32)\n\nSee also: DiscreteDEQSolver\n\n\n\n\n\n","category":"type"},{"location":"manual/solvers/#Discrete-DEQs","page":"Dynamical Systems","title":"Discrete DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"DiscreteDEQSolver","category":"page"},{"location":"manual/solvers/#FastDEQ.DiscreteDEQSolver","page":"Dynamical Systems","title":"FastDEQ.DiscreteDEQSolver","text":"DiscreteDEQSolver(alg=LimitedMemoryBroydenSolver(); mode::Symbol=:rel_deq_default, abstol_termination::T=1.0f-8, reltol_termination::T=1.0f-8)\n\nSolver for Discrete DEQ Problem (Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019)). Similar to SSrootfind but provides more flexibility needed     for solving DEQ problems.\n\nArguments\n\nalg: Algorithm to solve the Nonlinear Problem (Default: LimitedMemoryBroydenSolver)\nmode: Termination Mode of the solver. See below for a description of the various termination conditions (Default: :rel_deq_default)\nabstol_termination: Absolute tolerance for termination. (Default: 1f-8)\nreltol_termination: Relative tolerance for termination. (Default: 1f-8)\n\nSee also: ContinuousDEQSolver\n\n\n\n\n\n","category":"type"},{"location":"manual/solvers/#Termination-Conditions","page":"Dynamical Systems","title":"Termination Conditions","text":"","category":"section"},{"location":"manual/solvers/#Termination-on-Absolute-Tolerance","page":"Dynamical Systems","title":"Termination on Absolute Tolerance","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":abs: Terminates if all left(  fracpartial upartial t  leq abstol right)\n:abs_norm: Terminates if  fracpartial upartial t  leq abstol\n:abs_deq_default: Essentially abs_norm + terminate if there has been no improvement for the last 30 steps + terminate if the solution blows up (diverges)\n:abs_deq_best: Same as :abs_deq_default but uses the best solution found so far, i.e. deviates only if the solution has not converged","category":"page"},{"location":"manual/solvers/#Termination-on-Relative-Tolerance","page":"Dynamical Systems","title":"Termination on Relative Tolerance","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":rel: Terminates if all left( fracpartial upartial t  leq reltol times  u  right)\n:rel_norm: Terminates if  fracpartial upartial t  leq reltol times  fracpartial upartial t + u \n:rel_deq_default: Essentially rel_norm + terminate if there has been no improvement for the last 30 steps + terminate if the solution blows up (diverges)\n:rel_deq_best: Same as :rel_deq_default but uses the best solution found so far, i.e. deviates only if the solution has not converged","category":"page"},{"location":"manual/solvers/#Termination-using-both-Absolute-and-Relative-Tolerances","page":"Dynamical Systems","title":"Termination using both Absolute and Relative Tolerances","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":norm: Terminates if  fracpartial upartial t  leq reltol times  fracpartial upartial t + u  &           fracpartial upartial t  leq abstol\nfallback: Check if all values of the derivative is close to zero wrt both relative and absolute tolerance. This is usable for small problems             but doesn't scale well for neural networks, and should be avoided unless absolutely necessary","category":"page"},{"location":"#FastDEQ:-(Fast)-Deep-Equlibrium-Networks","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: (Fast) Deep Equlibrium Networks","text":"","category":"section"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"FastDEQ.jl is a framework built on top of DifferentialEquations.jl and Lux.jl enabling the efficient training and inference for Deep Equilibrium Networks (Infinitely Deep Neural Networks).","category":"page"},{"location":"#Installation","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"Installation","text":"","category":"section"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"Currently the package is not registered and requires manually installing a few dependencies. We are working towards upstream fixes which will make installation easier","category":"page"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"] add https://github.com/avik-pal/Lux.jl.git#main\n] add https://github.com/SciML/FastDEQ.jl","category":"page"},{"location":"#Citation","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"Citation","text":"","category":"section"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"If you are using this project for research or other academic purposes consider citing our paper:","category":"page"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"@misc{pal2022mixing,\n      title={Mixing Implicit and Explicit Deep Learning with Skip DEQs and Infinite Time Neural ODEs (Continuous DEQs)}, \n      author={Avik Pal and Alan Edelman and Christopher Rackauckas},\n      year={2022},\n      eprint={2201.12240},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}","category":"page"},{"location":"","page":"FastDEQ: Fast Deep Equilibrium Networks","title":"FastDEQ: Fast Deep Equilibrium Networks","text":"For specific algorithms, check the respective documentations and cite the corresponding papers.","category":"page"},{"location":"manual/layers/#Layers","page":"General Purpose Layers","title":"Layers","text":"","category":"section"},{"location":"manual/layers/","page":"General Purpose Layers","title":"General Purpose Layers","text":"DEQChain","category":"page"},{"location":"manual/layers/#FastDEQ.DEQChain","page":"General Purpose Layers","title":"FastDEQ.DEQChain","text":"DEQChain(layers...)\n\nSequence of layers divided into 3 chunks –\n\npre_deq – layers that are executed before DEQ is applied\ndeq – The Deep Equilibrium Layer\npost_deq – layers that are executed after DEQ is applied\n\nConstraint: Must have one DEQ layer in layers\n\n\n\n\n\n","category":"type"},{"location":"manual/nlsolve/#NonLinear-Solvers","page":"Non Linear Solvers","title":"NonLinear Solvers","text":"","category":"section"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"We provide the following NonLinear Solvers for DEQs. These are compatible with GPUs.","category":"page"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"note: Note\nIf you are looking for general purpose nonlinear solvers, we recommend checking out NonlinearSolve.jl","category":"page"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"BroydenSolver\nLimitedMemoryBroydenSolver","category":"page"},{"location":"manual/nlsolve/#FastDEQ.BroydenSolver","page":"Non Linear Solvers","title":"FastDEQ.BroydenSolver","text":"BroydenSolver(; T=Float32, device, original_dims::Tuple{Int,Int}, batch_size, maxiters::Int=50, ϵ::Real=1e-6,\n              abstol::Union{Real,Nothing}=nothing, reltol::Union{Real,Nothing}=nothing)\n\nBroyden Solver (Charles G Broyden (1965)) for solving Discrete DEQs. It is recommended to use LimitedMemoryBroydenSolver for better performance.\n\nArguments\n\nT: The type of the elements of the vectors. (Default: Float32)\ndevice: The device to use. Pass gpu to use the GPU else pass cpu.\noriginal_dims: Dimensions to reshape the arrays into (excluding the batch dimension).\nbatch_size: The batch size of the problem. Your inputs can have a different batch size, but having               them match allows us to efficiently cache internal statistics without reallocation.\nmaxiters: Maximum number of iterations to run.\nϵ: Tolerance for convergence.\nabstol: Absolute tolerance.\nreltol: Relative tolerance. (This value is ignored by BroydenSolver at the moment)\n\nSee also: LimitedMemoryBroydenSolver\n\n\n\n\n\n","category":"type"},{"location":"manual/nlsolve/#FastDEQ.LimitedMemoryBroydenSolver","page":"Non Linear Solvers","title":"FastDEQ.LimitedMemoryBroydenSolver","text":"LimitedMemoryBroydenSolver(; T=Float32, device, original_dims::Tuple{Int,Int}, batch_size, maxiters::Int=50,\n                           ϵ::Real=1e-6, criteria::Symbol=:reltol, abstol::Union{Real,Nothing}=nothing,\n                           reltol::Union{Real,Nothing}=nothing\n\nLimited Memory Broyden Solver (Shaojie Bai, Vladlen Koltun, J. Zico Kolter (2020)) for solving Discrete DEQs.\n\nArguments\n\nT: The type of the elements of the vectors. (Default: Float32)\ndevice: The device to use. Pass gpu to use the GPU else pass cpu.\noriginal_dims: Dimensions to reshape the arrays into (excluding the batch dimension).\nbatch_size: The batch size of the problem. Your inputs can have a different batch size, but having               them match allows us to efficiently cache internal statistics without reallocation.\nmaxiters: Maximum number of iterations to run.\nϵ: Tolerance for convergence.\ncriteria: The criteria to use for convergence. Can be :reltol or :abstol.\nabstol: Absolute tolerance.\nreltol: Relative tolerance.\n\nSee also: BroydenSolver\n\n\n\n\n\n","category":"type"}]
}
