var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"manual/deqs/#Deep-Equilibrium-Models","page":"DEQ Layers","title":"Deep Equilibrium Models","text":"","category":"section"},{"location":"manual/deqs/#Standard-Models","page":"DEQ Layers","title":"Standard Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"DeepEquilibriumNetwork\nSkipDeepEquilibriumNetwork","category":"page"},{"location":"manual/deqs/#MultiScale-Models","page":"DEQ Layers","title":"MultiScale Models","text":"","category":"section"},{"location":"manual/deqs/","page":"DEQ Layers","title":"DEQ Layers","text":"MultiScaleDeepEquilibriumNetwork\nMultiScaleSkipDeepEquilibriumNetwork","category":"page"},{"location":"manual/misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"manual/misc/","page":"Miscellaneous","title":"Miscellaneous","text":"DeepEquilibriumAdjoint\nDeepEquilibriumSolution\nNormalInitializer","category":"page"},{"location":"manual/solvers/#Dynamical-System-Variants","page":"Dynamical Systems","title":"Dynamical System Variants","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"Shaojie Bai, J. Zico Kolter, Vladlen Koltun (2019) introduced Discrete Deep Equilibrium Models which drives a Discrete Dynamical System to its steady-state. Avik Pal, Alan Edelman, Christopher Rackauckas (2022) extends this framework to Continuous Dynamical Systems which converge to the steady-stable in a more stable fashion. For a detailed discussion refer to Avik Pal, Alan Edelman, Christopher Rackauckas (2022).","category":"page"},{"location":"manual/solvers/#Continuous-DEQs","page":"Dynamical Systems","title":"Continuous DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"ContinuousDEQSolver","category":"page"},{"location":"manual/solvers/#Discrete-DEQs","page":"Dynamical Systems","title":"Discrete DEQs","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":"DiscreteDEQSolver","category":"page"},{"location":"manual/solvers/#Termination-Conditions","page":"Dynamical Systems","title":"Termination Conditions","text":"","category":"section"},{"location":"manual/solvers/#Termination-on-Absolute-Tolerance","page":"Dynamical Systems","title":"Termination on Absolute Tolerance","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":abs: Terminates if all left(  fracpartial upartial t  leq abstol right)\n:abs_norm: Terminates if  fracpartial upartial t  leq abstol\n:abs_deq_default: Essentially abs_norm + terminate if there has been no improvement for the last 30 steps + terminate if the solution blows up (diverges)\n:abs_deq_best: Same as :abs_deq_default but uses the best solution found so far, i.e. deviates only if the solution has not converged","category":"page"},{"location":"manual/solvers/#Termination-on-Relative-Tolerance","page":"Dynamical Systems","title":"Termination on Relative Tolerance","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":rel: Terminates if all left( fracpartial upartial t  leq reltol times  u  right)\n:rel_norm: Terminates if  fracpartial upartial t  leq reltol times  fracpartial upartial t + u \n:rel_deq_default: Essentially rel_norm + terminate if there has been no improvement for the last 30 steps + terminate if the solution blows up (diverges)\n:rel_deq_best: Same as :rel_deq_default but uses the best solution found so far, i.e. deviates only if the solution has not converged","category":"page"},{"location":"manual/solvers/#Termination-using-both-Absolute-and-Relative-Tolerances","page":"Dynamical Systems","title":"Termination using both Absolute and Relative Tolerances","text":"","category":"section"},{"location":"manual/solvers/","page":"Dynamical Systems","title":"Dynamical Systems","text":":norm: Terminates if  fracpartial upartial t  leq reltol times  fracpartial upartial t + u  &           fracpartial upartial t  leq abstol\nfallback: Check if all values of the derivative is close to zero wrt both relative and absolute tolerance. This is usable for small problems             but doesn't scale well for neural networks, and should be avoided unless absolutely necessary","category":"page"},{"location":"#DeepEquilibriumNetworks:-(Fast)-Deep-Equlibrium-Networks","page":"Home","title":"DeepEquilibriumNetworks: (Fast) Deep Equlibrium Networks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DeepEquilibriumNetworks.jl is a framework built on top of DifferentialEquations.jl and Lux.jl enabling the efficient training and inference for Deep Equilibrium Networks (Infinitely Deep Neural Networks).","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"] add DeepEquilibriumNetworks","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Lux, DeepEquilibriumNetworks, Random\n\nseed = 0\nrng = Random.default_rng()\nRandom.seed!(rng, seed)\n\nmodel = DEQChain(Dense(2, 2),\n                 DeepEquilibriumNetwork(Parallel(+, Dense(2, 2; bias=false),\n                                                 Dense(2, 2; bias=false)),\n                                        ContinuousDEQSolver(; abstol=0.1f0,\n                                                            reltol=0.1f0,\n                                                            abstol_termination=0.1f0,\n                                                            reltol_termination=0.1f0)))\n\nps, st = gpu.(Lux.setup(rng, model))\nx = gpu(rand(rng, Float32, 2, 1))\ny = gpu(rand(rng, Float32, 2, 1))\n\ngs = gradient(p -> sum(abs2, model(x, p, st)[1][1] .- y), ps)[1]","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are using this project for research or other academic purposes consider citing our paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{pal2022mixing,\n      title={Mixing Implicit and Explicit Deep Learning with Skip DEQs and Infinite Time Neural ODEs (Continuous DEQs)}, \n      author={Avik Pal and Alan Edelman and Christopher Rackauckas},\n      year={2022},\n      eprint={2201.12240},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"For specific algorithms, check the respective documentations and cite the corresponding papers.","category":"page"},{"location":"manual/layers/#Layers","page":"General Purpose Layers","title":"Layers","text":"","category":"section"},{"location":"manual/layers/","page":"General Purpose Layers","title":"General Purpose Layers","text":"DEQChain","category":"page"},{"location":"manual/nlsolve/#NonLinear-Solvers","page":"Non Linear Solvers","title":"NonLinear Solvers","text":"","category":"section"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"We provide the following NonLinear Solvers for DEQs. These are compatible with GPUs.","category":"page"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"note: Note\nIf you are looking for general purpose nonlinear solvers, we recommend checking out NonlinearSolve.jl","category":"page"},{"location":"manual/nlsolve/","page":"Non Linear Solvers","title":"Non Linear Solvers","text":"BroydenSolver\nLimitedMemoryBroydenSolver","category":"page"}]
}
